<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--引入文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--配置c3p0的连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 连接数据库的基本参数 -->
        <property name="driverClass" value="${jdbc.DriverClass}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--在连接池中可用的数据库连接的最少数目 -->
        <!--<property name="minPoolSize" value="${minSize}"/>-->
        <!--&lt;!&ndash;在连接池中所有数据库连接的最大数目  &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${maxSize}"/>-->
        <!--&lt;!&ndash;设定数据库连接的过期时间,以秒为单位,-->
        <!--如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 &ndash;&gt;-->
        <!--<property name="maxIdleTimeExcessConnections" value="${timeOut}"/>-->
        <!--&lt;!&ndash;每3000秒检查所有连接池中的空闲连接 以秒为单位&ndash;&gt;-->
        <!--<property name="idleConnectionTestPeriod" value="${idleTestPeriod}"/>-->
    </bean>

    <!--spring整合hibernate-->
    <!--引入hibernate配置信息-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!--引入hibernate的配置文件-->
        <!--<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置Hibernate的相关属性 -->
        <property name="hibernateProperties">
            <props>
                <!-- 配置Hibernate的方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!--打印sql-->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 格式化SQL -->
                <prop key="hibernate.format_sql">true</prop>
                <!-- 格式化SQL -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!--设置引入映射-->
        <property name="mappingResources">
            <list>
                <value>com/itheima/ssh/domain/customer.hbm.xml</value>
            </list>
        </property>
    </bean>

    <!-- 第一种方式：调用service -->
    <!--<bean id="customerService" class="com.itheima.ssh.service.impl.CustomerServiceImpl">-->

    <!--</bean>-->

    <!--第二种方式：调用service 配置scope多例，不能单例报错  手动注入service -->
    <bean id="customerAction" class="com.itheima.ssh.web.action.CustomerAction" scope="prototype">
        <property name="customerService" ref="customerService"></property>
    </bean>

    <!--配置service-->
    <bean id="customerService" class="com.itheima.ssh.service.impl.CustomerServiceImpl" scope="prototype">
        <property name="customerDao" ref="customerDao" ></property>
    </bean>

    <!--配置dao-->
    <bean id="customerDao" class="com.itheima.ssh.dao.impl.CustomerDaoImpl">
        <!--注入sessionFactory-->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>


    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!--开启注解事务-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

</beans>